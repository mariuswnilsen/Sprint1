
DECLARE EXTERNAL @inputAddress string = "/HafslundStrom/Input/HafslundStromContext/Address.json";

DECLARE EXTERNAL @outTest string = "/HafslundStrom/Staging/Address.csv";

//@in = EXTRACT txt string FROM @inputAddress USING Extractors.Text(delimiter: '\b');

@inAddressFile= 
    EXTRACT jsonString string 
    FROM @inputAddress
    USING Extractors.Text(delimiter:'\b', quoting:false);

@jsonifyAddress = 
    SELECT Microsoft.Analytics.Samples.Formats.Json.JsonFunctions.JsonTuple(jsonString) AS recAddress 
    FROM @inAddressFile; 

@InAddressJSON = 
    SELECT 
    recAddress["Id"] AS KeyViteId,
    recAddress["StreetName"] AS StreetName,
    recAddress["Number"] AS Number,
    recAddress["Letter"] AS Letter,
    recAddress["CO"] AS Co,
    recAddress["Description"] AS Description,
    recAddress["Note"] AS Note,
    recAddress["GeoLocationId"] AS GeoLocationId,
    recAddress["ZipCodeId"] AS ZipCodeId,
    recAddress["CreatedDate"] AS CreatedDate,
    recAddress["UpdatedDate"] AS UpdatedDate,
FROM @jsonifyAddress;



OUTPUT @in TO @outTest USING Outputters.Csv();


// Gammel kode


// Historisering av data. 


//Hent de radene som finnes i tabell
@EksisterendeRader =
    SELECT *
    FROM Address; // WHERE Niva == "Gatenummer";
  // må opprette Address-tabell. Skip tabell, bruk fil. 
  
  //Behold bare de radene som ikke finnes i nytt datasett
@UendredeRader =
    SELECT a.PK_Address,
           a.AddressId,
           a.StreetName,
           a.Number,
           a.Letter,
           a.Co,
           a.Description,
           a.Note,
           a.GeoLocationId,
           a.Zip,
           a.CityName,
           a.CountryCode,
           a.Kommune,
           a.Fylke,
           a.Latitude,
           a.Longitude,
           a.Niva,
           a.CreatedDate,
           a.UpdatedDate,
           a.DataLakeCreatedDate,
           a.DataLakeUpdatedDate,
           a.Checksum
    FROM @EksisterendeRader AS a
         LEFT ANTISEMIJOIN
             @AddressAndZipCode AS AddressAndZipCode
         ON a.AddressId == AddressAndZipCode.AddressId
         ;
  
 //for rader som finnes fra før
@EndredeRader =
    SELECT 
           a.PK_Address,
           a.AddressId,
           a.StreetName,
           a.Number,
           a.Letter,
           a.Co,
           a.Description,
           a.Note,
           a.GeoLocationId,
           a.Zip,
           a.CityName,
           a.CountryCode,
           a.Kommune,
           a.Fylke,
           a.Latitude,
           a.Longitude,
           a.Niva,
           a.CreatedDate,
           a.UpdatedDate,
           a.DataLakeCreatedDate,
           //hvis checksum er lik beholdes DataLakeUpdatedDate fra eksisterende rad
           a.Checksum == AddressAndZipCode.Checksum? a.DataLakeUpdatedDate : AddressAndZipCode.DataLakeDate AS DataLakeUpdatedDate,
           AddressAndZipCode.Checksum
    FROM @EksisterendeRader AS a
         JOIN
             @AddressAndZipCode AS az //AddressAndZip
         ON a.AddressId == az.AddressId
         ; 

//nye rader
@NyeRader =
    SELECT ROW_NUMBER() OVER() AS PK_Address,
           a.AddressId,
           a.StreetName,
           a.Number,
           a.Letter,
           a.Co,
           a.Description,
           a.Note,
           a.GeoLocationId,
           a.Zip,
           a.CityName,
           a.CountryCode,
           a.Kommune,
           a.Fylke,
           a.Latitude,
           a.Longitude,
           a.Niva,
           a.CreatedDate,
           a.UpdatedDate,
           a.DataLakeDate AS DataLakeCreatedDate,
           a.DataLakeDate AS DataLakeUpdatedDate,
           a.Checksum,
           1 AS Join
    FROM @AddressAndZipCode AS a
         LEFT ANTISEMIJOIN
             @EksisterendeRader AS b
         ON a.AddressId == b.AddressId
         ;
  
  @MaxNokkel =
    SELECT 1 AS Join,
           MAX(PK_Address) AS MaxNokkel
    FROM Address;
  
@NyeRader2 =
    SELECT PK_Address + (MaxNokkel == null ? 0 : MaxNokkel) AS PK_Address,
           a.AddressId,
           a.StreetName,
           a.Number,
           a.Letter,
           a.Co,
           a.Description,
           a.Note,
           a.GeoLocationId,
           a.Zip,
           a.CityName,
           a.CountryCode,
           a.Kommune,
           a.Fylke,
           a.Latitude,
           a.Longitude,
           a.Niva,
           a.CreatedDate,
           a.UpdatedDate,
           a.DataLakeCreatedDate,
           a.DataLakeUpdatedDate,
           a.Checksum
    FROM @NyeRader AS a
         JOIN
             @MaxNokkel AS m
         ON a.Join == m.Join;

//sett sammen for å lage nytt datasett
@Nyttdatasett =
    SELECT *
    FROM @NyeRader2
    UNION ALL
    SELECT *
    FROM @UendredeRader
    UNION ALL
    SELECT *
    FROM @EndredeRader;
/*
//lag aggregat på Postnummer-nivå for adresse
@AddressAgg =
    SELECT DISTINCT - 2 AS AddressId,
                    "N/A" AS StreetName,
                    "N/A" AS Number,
                    "N/A" AS Letter,
                    "N/A" AS Co,
                    "N/A" AS Description,
                    "N/A" AS Note,
                    "N/A" AS GeoLocationId,
                    Zip,
                    CityName,
                    CountryCode,
                    Kommune,
                    Fylke,
                    Latitude,
                    Longitude,
                    "Postnummer" AS Niva,
                    DateTime.UtcNow.AddHours(2) AS CreatedDate,
                    DateTime.Parse("2999-12-31") AS UpdatedDate,
                    DateTime.UtcNow.AddHours(2) AS DataLakeDate,
                    HafslundStromBI.Functions.CreateHash(Zip + CityName + CountryCode + Kommune + Fylke + Latitude + Longitude + Niva) AS Checksum
    FROM @Nyttdatasett;

    @EksisterendeRaderAgg =
    SELECT *
    FROM HafslundStromBI.dbo.Address WHERE Niva == "Postnummer";


@NyeRaderAgg =
    SELECT ROW_NUMBER() OVER() AS PK_Address,
           a.AddressId,
           a.StreetName,
           a.Number,
           a.Letter,
           a.Co,
           a.Description,
           a.Note,
           a.GeoLocationId,
           a.Zip,
           a.CityName,
           a.CountryCode,
           a.Kommune,
           a.Fylke,
           a.Latitude,
           a.Longitude,
           a.Niva,
           a.CreatedDate,
           a.UpdatedDate,
           a.DataLakeDate AS DataLakeCreatedDate,
           a.DataLakeDate AS DataLakeUpdatedDate,
           a.Checksum,
           1 AS Join
    FROM @AddressAgg AS a
         LEFT ANTISEMIJOIN
             @EksisterendeRaderAgg AS b
         ON a.Zip == b.Zip AND a.CountryCode == b.CountryCode; 

//Hent lavesete nøkkelverdi
@MinNokkel =
    SELECT 1 AS Join,
           MIN(PK_Address) AS MinNokkel
    FROM HafslundStromBI.dbo.Address;

@NyeRaderAgg2 =
    SELECT PK_Address + (MinNokkel == null ? 0 : MinNokkel) AS PK_Address,
           a.AddressId,
           a.StreetName,
           a.Number,
           a.Letter,
           a.Co,
           a.Description,
           a.Note,
           a.GeoLocationId,
           a.Zip,
           a.CityName,
           a.CountryCode,
           a.Kommune,
           a.Fylke,
           a.Latitude,
           a.Longitude,
           a.Niva,
           a.CreatedDate,
           a.UpdatedDate,
           a.DataLakeCreatedDate,
           a.DataLakeUpdatedDate,
           a.Checksum
    FROM @NyeRaderAgg AS a
         JOIN
             @MinNokkel AS b
         ON a.Join == b.Join;  
 
 @uendredeRaderAgg =  SELECT *
    FROM @EksisterendeRaderAgg AS a
         LEFT ANTISEMIJOIN
             @AddressAgg AS b
         ON a.Zip == b.Zip AND a.CountryCode == b.CountryCode;

@endredeRaderAgg =
    SELECT a.PK_Address,
           a.AddressId,
           a.StreetName,
           a.Number,
           a.Letter,
           a.Co,
           a.Description,
           a.Note,
           a.GeoLocationId,
           a.Zip,
           a.CityName,
           a.CountryCode,
           a.Kommune,
           a.Fylke,
           a.Latitude,
           a.Longitude,
           a.Niva,
           a.CreatedDate,
           a.UpdatedDate,
           a.DataLakeCreatedDate,
           //hvis checksum er lik beholdes DataLakeUpdatedDate fra eksisterende rad
           a.Checksum == b.Checksum? a.DataLakeUpdatedDate : b.DataLakeDate AS DataLakeUpdatedDate,
           b.Checksum
    FROM @EksisterendeRaderAgg AS a
         JOIN
             @AddressAgg AS b
         ON a.Zip == b.Zip AND a.CountryCode == b.CountryCode;

@AdressUnion =
    SELECT *
    FROM @NyeRaderAgg2
    UNION ALL
    SELECT *
    FROM @uendredeRaderAgg
    UNION ALL
    SELECT *
    FROM @endredeRaderAgg
    UNION ALL
    SELECT *
    FROM @Nyttdatasett;

          
//tøm tabell
TRUNCATE TABLE HafslundStromBI.dbo.Address;

//last tabell på nytt
INSERT INTO HafslundStromBI.dbo.Address
SELECT *
FROM @AdressUnion;
*/


/*
//skriv data til fil
OUTPUT @AdressUnion 
    TO @outTest
    USING Outputters.Csv();


@AddressString =
    SELECT 
           Convert.ToString(PK_Address) AS PK_Address,
           Convert.ToString(AddressId) AS AddressId,
           StreetName,
           Number,
           Letter,
           Co,
           Description,
           Note,
           GeoLocationId,
           Zip,
           CityName,
           CountryCode,
           Kommune,
           Fylke,
           Latitude,
           Longitude,
           Niva,
           CreatedDate.ToString("dd.MM.yyyy HH:mm") AS CreatedDate,
           UpdatedDate.ToString("dd.MM.yyyy HH:mm") AS UpdatedDate,
           DataLakeCreatedDate.ToString("dd.MM.yyyy HH:mm") AS DataLakeCreatedDate,
           DataLakeUpdatedDate.ToString("dd.MM.yyyy HH:mm") AS DataLakeUpdatedDate,
           Checksum
    FROM @AdressUnion;

*/
//
